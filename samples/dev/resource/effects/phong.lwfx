<lwfx>
    <vs>
        attribute mediump vec3 a_position;
        attribute mediump vec2 a_uv;
        attribute mediump vec3 a_normal;

        uniform mat4 u_mv;
        uniform mat4 u_mvpmat;
        uniform mediump mat3 u_mvit;

        varying highp vec2 v_texCoord;
        varying mediump vec3 v_normal;
        varying mediump vec3 v_eyeSpaceVexPos;


        void main()
        {
            gl_Position = u_mvpmat * vec4(a_position, 1.0);
            v_texCoord = a_uv;
            v_normal = normalize(u_mvit * a_normal);
            v_eyeSpaceVexPos = vec3(u_mv * vec4(a_position, 1.0));
        }
    </vs>
    <fs>
        varying highp vec2 v_texCoord;
        varying mediump vec3 v_normal;
        varying mediump vec3 v_eyeSpaceVexPos;
        uniform sampler2D u_texture;
        uniform mediump vec3 u_lightdir;
        uniform mediump float u_shininess;

        const mediump vec3 lightDir = normalize(vec3(0.5, 0.5, 1.0));

        void main()
        {
            mediump vec3 eyeDir = -normalize(v_eyeSpaceVexPos);
            //mediump vec3 lightDir = normalize(u_lightdir - v_eyeSpaceVexPos);
            

            lowp float NdotL = max(dot(v_normal, lightDir), 0.0);
            lowp float diffuse = NdotL;

            mediump vec3 halfVector = normalize(lightDir + eyeDir);
            lowp float NdotH = max(dot(v_normal, halfVector), 0.0);       
            lowp float specular = pow(NdotH, u_shininess);

            gl_FragColor = texture2D(u_texture, v_texCoord)*(1.0+diffuse*0.4)+specular*0.8;
        }
    </fs>
    <attribute name="a_position" semantic="POSITION"/>
    <attribute name="a_uv" semantic="UV0"/>
    <attribute name="a_normal" semantic="NORMAL"/>
    <uniform name="u_mv" semantic="WORLDVIEW"/>
    <uniform name="u_mvpmat" semantic="WORLDVIEWPROJ"/>
    <uniform name="u_mvit" semantic="WORLDVIEWIT"/>

    <input name="u_texture" type="TEXTURE"/>
    <input name="u_lightdir" type="VEC3"/>
    <input name="u_shininess" type="FLOAT"/>
</lwfx>